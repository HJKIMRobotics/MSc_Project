<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 
  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	
	<arg name="points_topic" default="/camera/depth/color/points" />
    <node pkg="msca3dp"
        name="plane_segment"
        type="plane_segment"
        respawn="false"
        output="screen"
        cwd="node"
        args="$(arg points_topic)">
		<!-- The header frame id of the segmented point cloud -->
		<param name="est_based" value="False" />
    </node>
	
	<node pkg="msca3dp" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.005" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<!-- <param name="frame_id" type="string" value="camera_link" /> -->
		<param name="frame_id" type="string" value="world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="1.5" />
		<param name="sensor_model/hit" value="0.7" />
		<param name="sensor_model/miss" value="0.4" />
		<param name="sensor_model/min" value="0.12" />
		<param name="sensor_model/max" value="0.97" />
		<param name="sensor_model/occupThres" value="0.7" />

		<!-- print occupancy probability -->
		<!-- <param name="print_prob" value="true" /> -->

		<!-- <param name="enable_changeDetection" value="true" /> -->
		<!-- <param name="enable_printpoint" value="true" /> -->
		<!-- <param name="enable_printStorePoint" value="true" /> -->
		<param name="modelname" value="nmodel.pcd" />

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/inliers" />
		<!-- <remap from="cloud_in" to="/ndModel" /> -->
		<!-- <remap from="cloud_in" to="/camera/depth/color/points" /> -->
		<!-- <remap from="cloud_in" to="/points" /> -->
	
	</node>
</launch>